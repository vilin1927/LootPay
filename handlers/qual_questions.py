from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from states import QualificationStates

router = Router()

# Create welcome keyboard
welcome_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ù–∞—á–∞—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data="start_qualification"),
        ],
        [
            InlineKeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/lootpay_support_bot"),
        ]
    ]
)

# Create keyboard for question 1
q1_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞–º–∏", callback_data="q1_games"),
        ],
        [
            InlineKeyboardButton(text="‚ú® –í–Ω—É—Ç—Ä—è—à–∫–∞–º–∏ (—Å–∫–∏–Ω—ã, –ø—å—é—Ä–æ—á–∫–∏, –∫–µ–π—Å—ã)", callback_data="q1_items"),
        ],
        [
            InlineKeyboardButton(text="üö´ –ù–∏—á–µ–≥–æ –Ω–µ –±–µ—Ä—É", callback_data="q1_nothing"),
        ],
        [
            InlineKeyboardButton(text="üì¥ –ù–µ —é–∑–∞—é –°—Ç–∏–º", callback_data="q1_no_steam"),
        ]
    ]
)

# Create keyboard for question 2
q2_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="üëç –î–∞, —é–∑–∞—é", callback_data="q2_yes"),
        ],
        [
            InlineKeyboardButton(text="üëé –î–∞, –Ω–æ –∑–∞–±—Ä–æ—Å–∏–ª(–∞)", callback_data="q2_past"),
        ],
        [
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="q2_no"),
        ]
    ]
)

# Create keyboard for question 3
q3_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, –æ–∫", callback_data="q3_ok"),
        ],
        [
            InlineKeyboardButton(text="üá¨üáß –Ø –∏–∑ –ë—Ä–∏—Ç–∞–Ω–∏–∏", callback_data="q3_uk"),
        ],
        [
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –Ω–µ –≤ —Ç–µ–º—É", callback_data="q3_no"),
        ]
    ]
)

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """Handle the /start command and show welcome message"""
    # Clear any existing state
    await state.clear()
    
    welcome_text = (
        "\\*bold \\*text\\*\n"
        "\\_italic \\*text\\_\n"
        "\\_\\_underline\\_\\_\n"
        "\\~strikethrough\\~\n"
        "\\|\\|spoiler\\|\\|\n"
        "\\*bold \\_italic bold \\~italic bold strikethrough \\|\\|italic bold strikethrough spoiler\\|\\|\\~ \\_\\_underline italic bold\\_\\_\\_ bold\\*\n"
        "\\[inline URL\\]\\(http://www\\.example\\.com/\\)\n"
        "\\[inline mention of a user\\]\\(tg://user?id=123456789\\)\n"
        "\\!\\[üëç\\]\\(tg://emoji?id=5368324170671202286\\)\n"
        "`inline fixed-width code`\n"
        "```\n"
        "pre-formatted fixed-width code block\n"
        "```\n"
        "```python\n"
        "pre-formatted fixed-width code block written in the Python programming language\n"
        "```\n"
        "\\>Block quotation started\n"
        "\\>Block quotation continued\n"
        "\\>Block quotation continued\n"
        "\\>Block quotation continued\n"
        "\\>The last line of the block quotation\n"
        "\\*\\*\\>The expandable block quotation started right after the previous block quotation\n"
        "\\>It is separated from the previous block quotation by an empty bold entity\n"
        "\\>Expandable block quotation continued\n"
        "\\>Hidden by default part of the expandable block quotation started\n"
        "\\>Expandable block quotation continued\n"
        "\\>The last line of the expandable block quotation with the expandability mark\\|\\|"
    )
    await message.answer(welcome_text, reply_markup=welcome_keyboard, parse_mode="MarkdownV2")

@router.callback_query(F.data == "start_qualification")
async def start_qualification(callback: CallbackQuery, state: FSMContext):
    """Start the qualification process when user clicks '–ù–∞—á–∞—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ'"""
    await callback.message.edit_text(
        "–ù–∞ —á—Ç–æ —á–∞—â–µ –≤—Å–µ–≥–æ —Ç—Ä–∞—Ç–∏—à—å –¥–µ–Ω—å–≥–∏ –≤ Steam?",
        reply_markup=q1_keyboard
    )
    await state.set_state(QualificationStates.waiting_for_q1)

@router.callback_query(QualificationStates.waiting_for_q1)
async def process_q1(callback: CallbackQuery, state: FSMContext):
    """Process answer to question 1"""
    await callback.message.edit_text(
        "–ü—Ä–æ–±–æ–≤–∞–ª(–∞) –¥—Ä—É–≥–∏–µ –ø–æ–ø–æ–ª–Ω—è–ª–∫–∏?",
        reply_markup=q2_keyboard
    )
    await state.set_state(QualificationStates.waiting_for_q2)

@router.callback_query(QualificationStates.waiting_for_q2)
async def process_q2(callback: CallbackQuery, state: FSMContext):
    """Process answer to question 2"""
    await callback.message.edit_text(
        "–ú—ã –¥–µ–ª–∞–µ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ USD –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω (–∫—Ä–æ–º–µ UK) ‚Äî –≥—É–¥?",
        reply_markup=q3_keyboard
    )
    await state.set_state(QualificationStates.waiting_for_q3)

@router.callback_query(QualificationStates.waiting_for_q3)
async def process_q3(callback: CallbackQuery, state: FSMContext):
    """Process answer to question 3 and show final message"""
    final_message = (
        "üéâ –ö—Ä—É—Ç–æ, —Ç—ã –ø—Ä–æ—à—ë–ª –æ–ø—Ä–æ—Å!\n\n"
        "üöÄ –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è —Å–≤–æ–∏–º–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏ ‚Äî —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –¥–µ–ª–∞—Ç—å —Å–µ—Ä–≤–∏—Å –µ—â—ë —É–¥–æ–±–Ω–µ–µ.\n\n"
        "---\n\n"
        "–í–≤–µ–¥–∏—Ç–µ **–Ω–∏–∫–Ω–µ–π–º** —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ Steam, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ–º –ø–æ–ø–æ–ª–Ω—è—Ç—å.\n"
        "‚ùóÔ∏è –ù–∏–∫–Ω–µ–π–º ‚â† –ª–æ–≥–∏–Ω. –£–∑–Ω–∞—Ç—å —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º –º–æ–∂–Ω–æ [–∑–¥–µ—Å—å](https://telegra.ph/CHasto-zadavaemye-voprosy-pri-pokupke-04-09#%D0%98%D0%BC%D1%8F-%D0%B0%D0%BA%D0%BA%D0%B0%D1%83%D0%BD%D1%82%D0%B0-Steam---%D0%BA%D0%B0%D0%BA-%D0%BD%D0%B0%D0%B9%D1%82%D0%B8-?)"
    )
    await callback.message.edit_text(
        final_message,
        parse_mode="Markdown",
        disable_web_page_preview=True
    )
    await state.clear() 